'use client';

import { ChevronDown, ChevronUp, X } from 'lucide-react';
import { useState } from 'react';
import { getSupabaseClient } from '@/lib/supabase';
import type { Permission } from '@/types/database';
import { toast } from 'react-hot-toast';

interface CreateUserModalProps {
  isOpen: boolean;
  onClose: () => void;
  onUserCreated: () => void;
}

interface FormData {
  email: string;
  username: string;
  password: string;
  role: 'admin' | 'worker';
  permissions: Permission;
}

export default function CreateUserModal({
  isOpen,
  onClose,
  onUserCreated
}: CreateUserModalProps) {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [expandedSection, setExpandedSection] = useState<string | null>(null);
  
  // Initialize default permissions
  const defaultPermissions: Permission = {
    // Booking Permissions
    createBooking: false,
    viewBookings: true,
    manageBookings: false,
    
    // Customer Permissions
    createCustomer: false,
    viewCustomers: true,
    manageCustomers: false,
    
    // Vehicle Permissions
    createVehicle: false,
    viewVehicles: true,
    manageVehicles: false,
    
    // Maintenance Permissions
    createMaintenance: false,
    viewMaintenance: true,
    manageMaintenance: false,
    
    // Invoice & Payment Permissions
    createInvoice: false,
    viewInvoices: true,
    managePayments: false,
    
    // Report Permissions
    accessReports: false,
    exportReports: false,
    
    // Return Permissions
    manageReturns: false,
    viewReturns: true,
    
    // Notification Permissions
    manageNotifications: false,
    viewNotifications: true,
    
    // Settings Permission
    manageSettings: false
  };

  const [formData, setFormData] = useState<FormData>({
    email: '',
    username: '',
    password: '',
    role: 'worker',
    permissions: defaultPermissions
  });

  // Define permission groups
  const permissionGroups = {
    'Booking Permissions': [
      { key: 'createBooking', label: 'Create Bookings' },
      { key: 'viewBookings', label: 'View Bookings' },
      { key: 'manageBookings', label: 'Manage Bookings' }
    ],
    'Customer Management': [
      { key: 'createCustomer', label: 'Create Customers' },
      { key: 'viewCustomers', label: 'View Customers' },
      { key: 'manageCustomers', label: 'Manage Customers' }
    ],
    'Vehicle Management': [
      { key: 'createVehicle', label: 'Add Vehicles' },
      { key: 'viewVehicles', label: 'View Vehicles' },
      { key: 'manageVehicles', label: 'Manage Vehicles' }
    ],
    'Maintenance': [
      { key: 'createMaintenance', label: 'Create Maintenance' },
      { key: 'viewMaintenance', label: 'View Maintenance' },
      { key: 'manageMaintenance', label: 'Manage Maintenance' }
    ],
    'Invoicing & Payments': [
      { key: 'createInvoice', label: 'Create Invoices' },
      { key: 'viewInvoices', label: 'View Invoices' },
      { key: 'managePayments', label: 'Manage Payments' }
    ],
    'Reports': [
      { key: 'accessReports', label: 'Access Reports' },
      { key: 'exportReports', label: 'Export Reports' }
    ],
    'Returns': [
      { key: 'manageReturns', label: 'Manage Returns' },
      { key: 'viewReturns', label: 'View Returns' }
    ],
    'Notifications': [
      { key: 'manageNotifications', label: 'Manage Notifications' },
      { key: 'viewNotifications', label: 'View Notifications' }
    ],
    'Settings': [
      { key: 'manageSettings', label: 'Manage Settings' }
    ]
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handlePermissionChange = (permission: keyof Permission) => {
    setFormData(prev => ({
      ...prev,
      permissions: {
        ...prev.permissions,
        [permission]: !prev.permissions[permission]
      }
    }));
  };

  const toggleSection = (section: string) => {
    setExpandedSection(expandedSection === section ? null : section);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      const response = await fetch('/api/users/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...formData,
          email: formData.email || `${formData.username}@example.com`
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to create user');
      }

      toast.success('User created successfully');
      onUserCreated();
      onClose();
    } catch (err) {
      console.error('Error creating user:', err);
      setError(err instanceof Error ? err.message : 'Failed to create user');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg w-full max-w-2xl max-h-[90vh] flex flex-col">
        <div className="flex justify-between items-center p-4 border-b">
          <h2 className="text-lg font-semibold">Create New User</h2>
          <button
            type="button"
            onClick={onClose}
            className="text-gray-400 hover:text-gray-500"
          >
            <X className="h-5 w-5" />
          </button>
        </div>

        <form onSubmit={handleSubmit} className="p-4 space-y-4 overflow-y-auto">
          {error && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-md text-sm">
              {error}
            </div>
          )}

          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label htmlFor="username" className="block text-sm font-medium text-gray-700">
                  Username *
                </label>
                <input
                  type="text"
                  id="username"
                  name="username"
                  value={formData.username}
                  onChange={handleInputChange}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                  required
                />
              </div>
              <div>
                <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                  Email (optional)
                </label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  value={formData.email}
                  onChange={handleInputChange}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                  placeholder="Will use username@example.com if empty"
                />
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                  Password *
                </label>
                <input
                  type="password"
                  id="password"
                  name="password"
                  required
                  minLength={6}
                  value={formData.password}
                  onChange={handleInputChange}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                />
              </div>
              <div>
                <label htmlFor="role" className="block text-sm font-medium text-gray-700">
                  Role *
                </label>
                <select
                  id="role"
                  name="role"
                  value={formData.role}
                  onChange={handleInputChange}
                  className="mt-1 block w-full rounded-md border-gray-300 py-2 pl-3 pr-10 text-base focus:border-blue-500 focus:outline-none focus:ring-blue-500 sm:text-sm"
                  required
                >
                  <option value="worker">Worker</option>
                  <option value="admin">Admin</option>
                </select>
              </div>
            </div>

            {/* Permissions */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Permissions
              </label>
              <div className="space-y-4">
                {Object.entries(permissionGroups).map(([section, perms]) => (
                  <div key={section} className="border rounded-md">
                    <button
                      type="button"
                      onClick={() => toggleSection(section)}
                      className="w-full px-4 py-2 flex justify-between items-center bg-gray-50 hover:bg-gray-100 rounded-t-md"
                    >
                      <h3 className="font-medium text-sm">{section}</h3>
                      {expandedSection === section ? (
                        <ChevronUp className="h-4 w-4" />
                      ) : (
                        <ChevronDown className="h-4 w-4" />
                      )}
                    </button>
                    {expandedSection === section && (
                      <div className="p-4 space-y-2 border-t">
                        {perms.map(({ key, label }) => (
                          <label key={key} className="flex items-center">
                            <input
                              type="checkbox"
                              checked={formData.permissions[key as keyof Permission]}
                              onChange={() => handlePermissionChange(key as keyof Permission)}
                              className="rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50"
                            />
                            <span className="ml-2 text-sm text-gray-700">{label}</span>
                          </label>
                        ))}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>

            <div className="mt-5">
              <button
                type="submit"
                disabled={loading}
                className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:text-sm disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {loading ? 'Creating...' : 'Create User'}
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>
  );
}
